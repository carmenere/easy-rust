@startuml
allow_mixing

interface DerefMut << (D, #FF7700) >> {
    + type Target = [T]
    + deref_mut(&mut self) -> &mut [T]
}

interface Deref << (D, #FF7700) >> {
    + type Target = [T];
    + deref(&self) -> &[T];
}

interface Iterator << (I, #FF7700) >> {
  + type Item = T
  + next(&mut self) -> Option<T>
  + collect<D: FromIterator<T>>(self) -> D {<D as FromIterator>::from_iter(self)}
}

interface "Iterator<&T>" << (I, #FF7700) >> {
  + type Item = &'a T
}

interface "Iterator<&mut T>" << (I, #FF7700) >> {
  + type Item = &'a mut T
}


interface "IntoIterator<T>" << (I, #FF7700) >> {
    + Item = T
    + IntoIter = IntoIter<T>
    + into_iter(self) -> IntoIter<T>
}

interface "IntoIterator<&T>" << (I, #FF7700) >> {
    + Item = &'a T
    + IntoIter = Iter<'a, T>
    + into_iter(self) -> Iter<'a, T> {self.iter()}
}

interface "IntoIterator<&mut T>" << (I, #FF7700) >> {
    + Item = &'a mut T
    + IntoIter = Iter<'a, T>
    + into_iter(self) -> Iter<'a, T> {self.iter_mut()}
}

interface "impl<T> FromIterator<T> for Vec<T>" << (F, #FF7700) >> {
    + from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T>
}

class " [T]" << (S, #FF7700) >> {
    + iter(&self) -> Iter<T> { Iter::new(self) }
    + iter_mut(&mut self) -> IterMut<T> { IterMut::new(self) }
}

class "&[T]" << (S, #FF7700) >>

class "&mut [T]" << (S, #FF7700) >>

struct "IntoIter<T>" << (I, #FF7700) >> {
}
note left: The //struct IntoIter<T>// is defined [[https://doc.rust-lang.org/src/alloc/vec/into_iter.rs.html here]]

class "Vec<T>" << (V, #FF7700) >> {
  + into_iter(&mut self) -> IntoIter<T>
}

"IntoIterator<T>" <|.. "Vec<T>"
"IntoIterator<&T>" <|.. "&Vec<T>"
"IntoIterator<&mut T>" <|.. "&mut Vec<T>"

"Vec<T>" --> "IntoIter<T>" : into_iter()

Iterator <|.. "IntoIter<T>"

Deref <|.. "Vec<T>"
DerefMut <|.. "Vec<T>"

"&Vec<T>" --> "&[T]" : Deref Coercion
"&mut Vec<T>" --> "&mut [T]" : Deref Coercion
"&Vec<T>" --> "Iter<T>" : iter()
"&mut Vec<T>" --> "IterMut<T>" : iter_mut()
"&[T]" --> "Iter<T>" : iter()
"&[T]" --> "Iter<T>" : into_iter()
"&mut [T]" --> "IterMut<T>" : iter_mut()
"&mut [T]" --> "IterMut<T>" : into_iter()
"impl<T> FromIterator<T> for Vec<T>" <|.. "Vec<T>"

" [T]" <|-- "&[T]"
" [T]" <|-- "&mut [T]"

"IntoIterator<T>" <|.. "&[T]"
"IntoIterator<T>" <|.. "&mut [T]"

"Iter<T>" ..|> "Iterator<&T>"
"IterMut<T>" ..|> "Iterator<&mut T>"

"Vec<T>::<>" --> "Vec<T>" : from_iter()

card "Option<T>"
card "D: FromIterator<T>"

"Iterator" --> "D: FromIterator<T>" : collect::<D>()
"Iterator" --> "Option<T>" : next()

"IntoIterator<T>" <|.. "IntoIter<T>"
note on link
Blanket impl<I: Iterator> <b>IntoIterator</b> for I
<b>Item</b> = I::Item
<b>IntoIter</b> = I
end note
@enduml
